<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title data-vn="Đăng nhập - CloudNine" data-en="Login - CloudNine" data-zh="登录 - CloudNine">Đăng nhập - CloudNine</title>
    
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Bootstrap & Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    
    <!-- Custom CSS -->
    <link href="~/css/Authentication/Login.css" rel="stylesheet" asp-append-version="true" />
</head>

<body>
    <!-- Animated Background -->
    <div class="login-background">
        <div class="floating-shape"></div>
        <div class="floating-shape"></div>
        <div class="floating-shape"></div>
        <div class="floating-shape"></div>
        <div class="floating-shape"></div>
    </div>

    <!-- Alert Modal -->
    <div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content shadow-lg">
                <div class="modal-header">
                    <h5 class="modal-title" id="alertModalLabel">
                        <i class="fas fa-exclamation-triangle"></i>
                        <span data-vn="Thông báo" data-en="Alert" data-zh="警告">Thông báo</span>
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center py-4">
                    <p id="alertMessage" class="fs-5 text-muted mb-0"></p>
                </div>
                <div class="modal-footer justify-content-center border-0">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i>
                        <span data-vn="Đóng" data-en="Close" data-zh="关闭">Đóng</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Login Container -->
    <div class="login-container">
        <div class="login-card">
            <!-- Logo Section -->
            <div class="login-logo">
                <div class="logo-container">
                    <i class="fas fa-cloud logo-icon"></i>
                    <div class="logo-text">CloudNine</div>
                </div>
                <div class="logo-subtitle">
                    <span data-vn="Nâng tầm trải nghiệm du lịch của bạn" data-en="Elevate your travel experience" data-zh="提升您的旅行体验">
                        Nâng tầm trải nghiệm du lịch của bạn
                    </span>
                </div>
            </div>

            <!-- Welcome Section -->
            <div class="welcome-section">
                <h1 class="welcome-title">
                    <span data-vn="Chào mừng trở lại!" data-en="Welcome Back!" data-zh="欢迎回来！">Chào mừng trở lại!</span>
                </h1>
                <p class="welcome-subtitle">
                    <span data-vn="Đăng nhập để tiếp tục hành trình của bạn" data-en="Sign in to continue your journey" data-zh="登录以继续您的旅程">
                        Đăng nhập để tiếp tục hành trình của bạn
                    </span>
                </p>
            </div>

            <!-- Login Form -->
            <form class="login-form">
                <!-- Username Field -->
                <div class="form-group">
                    <label class="form-label">
                        <span data-vn="Tên đăng nhập" data-en="Username" data-zh="用户名">Tên đăng nhập</span>
                    </label>
                    <div class="input-container">
                        <input type="text" 
                               class="form-control" 
                               name="Username" 
                               placeholder="Nhập tên đăng nhập"
                               data-placeholder-vn="Nhập tên đăng nhập" 
                               data-placeholder-en="Enter username" 
                               data-placeholder-zh="输入用户名"
                               required />
                        <i class="fas fa-user input-icon"></i>
                    </div>
                    <div class="error-message" id="Username"></div>
                </div>

                <!-- Password Field -->
                <div class="form-group">
                    <label class="form-label">
                        <span data-vn="Mật khẩu" data-en="Password" data-zh="密码">Mật khẩu</span>
                    </label>
                    <div class="input-container">
                        <input type="password" 
                               class="form-control" 
                               name="Password" 
                               placeholder="Nhập mật khẩu"
                               data-placeholder-vn="Nhập mật khẩu" 
                               data-placeholder-en="Enter password" 
                               data-placeholder-zh="输入密码"
                               required />
                        <i class="fas fa-lock input-icon"></i>
                    </div>
                    <div class="error-message" id="Password"></div>
                </div>

                <!-- Remember Me & Forgot Password -->
                <div class="form-options">
                    <div class="form-check">
                        <input class="form-check-input rememberMe" type="checkbox" id="rememberMe">
                        <label class="form-check-label" for="rememberMe">
                            <span data-vn="Ghi nhớ đăng nhập" data-en="Remember me" data-zh="记住我">Ghi nhớ đăng nhập</span>
                        </label>
                    </div>                    <a href="/ForgotPassword" class="forgot-password">
                        <span data-vn="Quên mật khẩu?" data-en="Forgot password?" data-zh="忘记密码？">Quên mật khẩu?</span>
                    </a>
                </div>

                <!-- Hidden Fields -->
                <input type="hidden" name="IsRememberMe" value="false" />

                <!-- Login Button -->
                <button type="button" onclick="LoginToSystem(event)" class="btn-login">
                    <span data-vn="Đăng nhập" data-en="Sign In" data-zh="登录">Đăng nhập</span>
                </button>                <!-- Sign Up Section -->
                <div class="signup-section">
                    <p class="signup-text">
                        <span data-vn="Chưa có tài khoản?" data-en="Not a member?" data-zh="还不是会员？">Chưa có tài khoản?</span>
                        <a href="/Register" class="signup-link">
                            <span data-vn="Tạo tài khoản" data-en="Create account" data-zh="创建账户">Tạo tài khoản</span>
                        </a>
                    </p>
                </div>            </form>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/common/LanguageUtils.js" asp-append-version="true"></script>
    <script src="~/js/authentication/Login.js" type="text/javascript" asp-append-version="true"></script>

    <script>
        // Enhanced login functionality
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Login page DOM loaded');
            console.log('window.LoginToSystem available:', typeof window.LoginToSystem);
            console.log('Host variable:', typeof host !== 'undefined' ? host : 'undefined');
            console.log('API URL will be:', `http://${typeof host !== 'undefined' ? host : 'localhost'}:5077/api/login`);
            
            // Check if Login.js is loaded
            console.log('Checking if Login.js functions are available...');
            console.log('parseJwtToken available:', typeof window.parseJwtToken);
            console.log('showSnackbar available:', typeof window.showSnackbar);
            
            // List all window properties that might be our functions
            const loginRelatedProps = Object.keys(window).filter(key => 
                key.toLowerCase().includes('login') || 
                key.toLowerCase().includes('auth') ||
                key.toLowerCase().includes('jwt')
            );
            console.log('Login-related window properties:', loginRelatedProps);
            
            // Handle remember me checkbox
            const rememberCheckbox = document.querySelector('.rememberMe');
            const hiddenRememberField = document.querySelector('input[name="IsRememberMe"]');
            
            rememberCheckbox.addEventListener('change', function() {
                hiddenRememberField.value = this.checked.toString();
            });

            // Add loading state to login button
            const originalLoginFunction = window.LoginToSystem;
            
            // If LoginToSystem is not available, create a fallback
            if (!originalLoginFunction) {
                console.warn('LoginToSystem function not found, creating fallback...');
                window.LoginToSystem = async function(event) {
                    try {
                        event.preventDefault();
                        const button = event.target;
                        
                        console.log('Fallback login function called');
                        button.classList.add('btn-loading');
                        button.disabled = true;
                        
                        const username = document.querySelector('input[name="Username"]').value;
                        const password = document.querySelector('input[name="Password"]').value;
                        
                        console.log('Username:', username);
                        console.log('Password length:', password.length);
                        
                        const response = await fetch(`http://localhost:5077/api/login`, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({
                                "Username": username,
                                "Password": password
                            }),
                            credentials: "include"
                        });
                        
                        console.log('Response status:', response.status);
                        
                        if (!response.ok) {
                            const result = await response.json();
                            console.log('Login failed:', result);
                            alert(result.message || 'Login failed');
                        } else {
                            const json = await response.json();
                            console.log('Login successful:', json);
                            
                            if (json.token) {
                                localStorage.setItem("token", json.token);
                                alert('Login successful!');
                                
                                // Simple redirect logic
                                const token = json.token;
                                const base64Url = token.split('.')[1];
                                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                                const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                                }).join(''));
                                const parseToken = JSON.parse(jsonPayload);
                                
                                const roleId = parseToken["RoleId"];
                                console.log('Role ID:', roleId);
                                
                                if (roleId == 1) {
                                    window.location.href = "/Admin/Dashboard";
                                } else {
                                    window.location.href = "/Home";
                                }
                            }
                        }
                    } catch (error) {
                        console.error('Login error:', error);
                        alert('Login error: ' + error.message);
                    } finally {
                        const button = event.target;
                        button.classList.remove('btn-loading');
                        button.disabled = false;
                    }
                };
            } else {
                // Wrapper for existing function
                window.LoginToSystem = function(event) {
                    const button = event.target;
                    
                    // Prevent multiple clicks
                    if (button.disabled) {
                        return;
                    }
                    
                    button.classList.add('btn-loading');
                    button.disabled = true;
                    
                    console.log('Login button clicked, calling original function...');
                    
                    // Set timeout to prevent infinite loading
                    const timeoutId = setTimeout(() => {
                        console.warn('Login timeout - restoring button state');
                        button.classList.remove('btn-loading');
                        button.disabled = false;
                    }, 30000); // 30 second timeout
                    
                    // Call original login function with proper error handling
                    Promise.resolve(originalLoginFunction(event))
                        .then(() => {
                            console.log('Login function completed successfully');
                        })
                        .catch((error) => {
                            console.error('Login function failed:', error);
                        })
                        .finally(() => {
                            console.log('Restoring button state');
                            clearTimeout(timeoutId);
                            button.classList.remove('btn-loading');
                            button.disabled = false;
                        });
                };
            }
            
            // Clear errors on input
            const inputs = document.querySelectorAll('.form-control');
            inputs.forEach(input => {
                input.addEventListener('input', function() {
                    this.classList.remove('input-error');
                    const errorElement = document.getElementById(this.name);
                    if (errorElement) {
                        errorElement.textContent = '';
                    }
                });
            });
        });
    </script>
</body>
</html>
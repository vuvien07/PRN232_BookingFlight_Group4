<!DOCTYPE html>
<html lang="vi">
<head>    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title data-vn="Đăng ký - CloudNine" data-en="Register - CloudNine" data-zh="注册 - CloudNine">Đăng ký - CloudNine</title>
    
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Bootstrap & Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            margin: 0;
            position: relative;
            overflow-x: hidden;
        }

        /* Animated Background */
        .login-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }        .floating-shape {
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
        }

        .floating-shape:nth-child(1) {
            width: 80px;
            height: 80px;
            top: 20%;
            left: 10%;
            animation-delay: 0s;
        }

        .floating-shape:nth-child(2) {
            width: 120px;
            height: 120px;
            top: 60%;
            right: 10%;
            animation-delay: 2s;
        }

        .floating-shape:nth-child(3) {
            width: 60px;
            height: 60px;
            bottom: 30%;
            left: 20%;
            animation-delay: 4s;
        }

        .floating-shape:nth-child(4) {
            width: 100px;
            height: 100px;
            top: 10%;
            right: 30%;
            animation-delay: 1s;
        }

        .floating-shape:nth-child(5) {
            width: 90px;
            height: 90px;
            bottom: 10%;            right: 40%;
            animation-delay: 3s;
        }

        .login-container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem 1rem;
        }        .login-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
            width: 100%;
            max-width: 600px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }        .login-logo {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .logo-container {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            margin-bottom: 10px;
        }

        .logo-icon {
            font-size: 2.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .logo-text {
            font-size: 2rem;
            font-weight: 700;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .logo-subtitle {
            font-size: 0.9rem;
            color: #6c757d;
            font-weight: 400;
        }        .welcome-section {
            text-align: center;
            margin-bottom: 1.25rem;
        }

        .welcome-title {
            font-size: 1.6rem;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 0.25rem;
        }

        .welcome-subtitle {
            color: #6c757d;
            font-size: 0.9rem;
            font-weight: 400;
        }.form-group {
            margin-bottom: 1rem;
        }

        .form-row {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .form-col {
            flex: 1;
        }        .form-col .form-group {
            margin-bottom: 0;
        }

        /* Responsive - Stack columns on mobile */
        @@media (max-width: 768px) {
            .form-row {
                flex-direction: column;
                gap: 0;
            }
            
            .form-col .form-group {
                margin-bottom: 1rem;
            }
            
            .login-card {
                padding: 1.5rem;
                margin: 0.5rem;
            }
            
            .welcome-title {
                font-size: 1.75rem;
            }
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #2c3e50;
            font-size: 0.95rem;
        }

        .input-container {
            position: relative;
        }

        .form-control {
            width: 100%;
            padding: 12px 45px 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.8);
        }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            background: rgba(255, 255, 255, 0.95);
        }

        .input-icon {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            font-size: 1rem;
        }        .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: block;
            min-height: 1.2rem;
        }

        .success-message {
            color: #28a745;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: block;
            min-height: 1.2rem;
        }

        .password-strength {
            margin-top: 0.5rem;
            font-size: 0.875rem;
        }

        .password-strength.weak {
            color: #dc3545;
        }

        .password-strength.medium {
            color: #ffc107;
        }

        .password-strength.strong {
            color: #28a745;
        }

        .btn-login {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 12px;
            color: white;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 1rem;
        }

        .btn-login:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-login:active {
            transform: translateY(0);
        }

        .signup-section {
            text-align: center;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid #e9ecef;
        }

        .signup-text {
            color: #6c757d;
            margin: 0;
        }

        .signup-link {
            color: #667eea;
            text-decoration: none;
            font-weight: 600;
            margin-left: 5px;
        }

        .signup-link:hover {
            color: #764ba2;
            text-decoration: underline;
        }

        .alert {
            border-radius: 12px;
            border: none;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .alert-success {
            background: rgba(40, 167, 69, 0.1);
            color: #155724;
            border-left: 4px solid #28a745;
        }

        .alert-danger {
            background: rgba(220, 53, 69, 0.1);
            color: #721c24;
            border-left: 4px solid #dc3545;
        }

        /* Loading state */
        .btn-loading {
            position: relative;
            color: transparent !important;
        }

        .btn-loading::after {
            content: "";
            position: absolute;
            width: 20px;
            height: 20px;
            top: 50%;
            left: 50%;
            margin-left: -10px;
            margin-top: -10px;            border: 2px solid #ffffff;
            border-radius: 50%;
            border-top-color: transparent;
        }
        }        /* Responsive styles removed to avoid Razor parsing issues */
    </style>
</head>

<body>
    <!-- Animated Background -->
    <div class="login-background">
        <div class="floating-shape"></div>
        <div class="floating-shape"></div>
        <div class="floating-shape"></div>
        <div class="floating-shape"></div>
        <div class="floating-shape"></div>
    </div>


    <!-- Alert Modal -->
    <div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow-lg">
                <div class="modal-header" id="modalHeader">
                    <h5 class="modal-title" id="alertModalLabel">
                        <i class="bi bi-info-circle-fill"></i> <span id="modalTitle">Info</span>
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center align-middle py-4">
                    <p id="alertMessage" class="fs-5 text-muted"></p>
                </div>
                <div class="modal-footer justify-content-center border-0">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>    </div>
    <div class="login-container">
        <div class="login-card">
            <!-- Logo Section -->
            <div class="login-logo">
                <div class="logo-container">
                    <i class="fas fa-cloud logo-icon"></i>
                    <div class="logo-text">CloudNine</div>
                </div>
                <div class="logo-subtitle">
                    <span data-vn="Nâng tầm trải nghiệm du lịch của bạn" data-en="Elevate your travel experience" data-zh="提升您的旅行体验">
                        Nâng tầm trải nghiệm du lịch của bạn
                    </span>
                </div>
            </div>

            <!-- Welcome Section -->
            <div class="welcome-section">
                <h1 class="welcome-title">
                    <span data-vn="Tạo tài khoản mới!" data-en="Create New Account!" data-zh="创造新账户！">Tạo tài khoản mới!</span>
                </h1>
                <p class="welcome-subtitle">
                    <span data-vn="Đăng ký để bắt đầu hành trình của bạn" data-en="Sign up to start your journey" data-zh="注册开始您的旅程">
                        Đăng ký để bắt đầu hành trình của bạn
                    </span>
                </p>
            </div>            <!-- Register Form -->
            <form id="registerForm" class="login-form">
                <!-- Username and Email Row -->
                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group">
                            <label class="form-label">
                                <span data-vn="Tên đăng nhập" data-en="Username" data-zh="用户名">Tên đăng nhập</span>
                            </label>
                            <div class="input-container">
                                <input type="text" 
                                       class="form-control" 
                                       id="username" 
                                       name="username" 
                                       placeholder="Nhập tên đăng nhập"
                                       data-placeholder-vn="Nhập tên đăng nhập" 
                                       data-placeholder-en="Enter username" 
                                       data-placeholder-zh="输入用户名"
                                       required />
                                <i class="fas fa-user input-icon"></i>
                            </div>
                            <div class="error-message" id="usernameError"></div>
                            <div class="success-message" id="usernameCheck"></div>
                        </div>
                    </div>
                    <div class="form-col">
                        <div class="form-group">
                            <label class="form-label">
                                <span data-vn="Email" data-en="Email" data-zh="邮箱">Email</span>
                            </label>
                            <div class="input-container">
                                <input type="email" 
                                       class="form-control" 
                                       id="email" 
                                       name="email" 
                                       placeholder="Nhập email"
                                       data-placeholder-vn="Nhập email" 
                                       data-placeholder-en="Enter email" 
                                       data-placeholder-zh="输入邮箱"
                                       required />
                                <i class="fas fa-envelope input-icon"></i>
                            </div>
                            <div class="error-message" id="emailError"></div>
                            <div class="success-message" id="emailCheck"></div>
                        </div>
                    </div>
                </div>

                <!-- Full Name Field -->
                <div class="form-group">
                    <label class="form-label">
                        <span data-vn="Họ và tên" data-en="Full Name" data-zh="全名">Họ và tên</span>
                    </label>
                    <div class="input-container">
                        <input type="text" 
                               class="form-control" 
                               id="fullname" 
                               name="fullname" 
                               placeholder="Nhập họ và tên"
                               data-placeholder-vn="Nhập họ và tên" 
                               data-placeholder-en="Enter full name" 
                               data-placeholder-zh="输入全名"
                               required />
                        <i class="fas fa-id-card input-icon"></i>
                    </div>
                    <div class="error-message" id="fullnameError"></div>
                </div>

                <!-- Password and Confirm Password Row -->
                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group">
                            <label class="form-label">
                                <span data-vn="Mật khẩu" data-en="Password" data-zh="密码">Mật khẩu</span>
                            </label>
                            <div class="input-container">
                                <input type="password" 
                                       class="form-control" 
                                       id="password" 
                                       name="password" 
                                       placeholder="Nhập mật khẩu"
                                       data-placeholder-vn="Nhập mật khẩu" 
                                       data-placeholder-en="Enter password" 
                                       data-placeholder-zh="输入密码"
                                       required />
                                <i class="fas fa-lock input-icon"></i>
                            </div>
                            <div class="error-message" id="passwordError"></div>
                            <div id="passwordStrength" class="password-strength"></div>
                        </div>
                    </div>
                    <div class="form-col">
                        <div class="form-group">
                            <label class="form-label">
                                <span data-vn="Xác nhận mật khẩu" data-en="Confirm Password" data-zh="确认密码">Xác nhận mật khẩu</span>
                            </label>
                            <div class="input-container">
                                <input type="password" 
                                       class="form-control" 
                                       id="confirmPassword" 
                                       name="confirmPassword" 
                                       placeholder="Xác nhận mật khẩu"
                                       data-placeholder-vn="Xác nhận mật khẩu" 
                                       data-placeholder-en="Confirm password" 
                                       data-placeholder-zh="确认密码"
                                       required />
                                <i class="fas fa-lock input-icon"></i>
                            </div>
                            <div class="error-message" id="confirmPasswordError"></div>
                        </div>
                    </div>
                </div>

                <!-- Address and Phone Row -->
                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group">
                            <label class="form-label">
                                <span data-vn="Địa chỉ" data-en="Address" data-zh="地址">Địa chỉ</span>
                            </label>
                            <div class="input-container">
                                <input type="text" 
                                       class="form-control" 
                                       id="address" 
                                       name="address" 
                                       placeholder="Nhập địa chỉ"
                                       data-placeholder-vn="Nhập địa chỉ" 
                                       data-placeholder-en="Enter address" 
                                       data-placeholder-zh="输入地址"
                                       required />
                                <i class="fas fa-map-marker-alt input-icon"></i>
                            </div>
                            <div class="error-message" id="addressError"></div>
                        </div>
                    </div>
                    <div class="form-col">
                        <div class="form-group">
                            <label class="form-label">
                                <span data-vn="Số điện thoại" data-en="Phone Number" data-zh="电话号码">Số điện thoại</span>
                            </label>
                            <div class="input-container">
                                <input type="tel" 
                                       class="form-control" 
                                       id="phoneNumber" 
                                       name="phoneNumber" 
                                       placeholder="Nhập số điện thoại"
                                       data-placeholder-vn="Nhập số điện thoại" 
                                       data-placeholder-en="Enter phone number" 
                                       data-placeholder-zh="输入电话号码"
                                       required />
                                <i class="fas fa-phone input-icon"></i>
                            </div>
                            <div class="error-message" id="phoneNumberError"></div>
                        </div>
                    </div>
                </div>

                <!-- Register Button -->
                <button type="submit" class="btn-login">
                    <span data-vn="Đăng ký" data-en="Register" data-zh="注册">Đăng ký</span>
                </button>

                <!-- Sign In Section -->
                <div class="signup-section">
                    <p class="signup-text">
                        <span data-vn="Đã có tài khoản?" data-en="Already have an account?" data-zh="已有账户？">Đã có tài khoản?</span>
                        <a href="/Login" class="signup-link">
                            <span data-vn="Đăng nhập" data-en="Sign In" data-zh="登录">Đăng nhập</span>
                        </a>
                    </p>
                </div>
            </form>
        </div>
    </div>
                    </div>
                </div>    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const API_BASE_URL = 'http://localhost:5077/api'; // Update with your server URL

        // Form validation functions
        function validateUsername(username) {
            if (!username) return 'Username is required';
            if (username.includes(' ')) return "Username doesn't contain space";
            if (username.length > 50) return 'Username must be less than 50 characters';
            return null;        }        function validateEmail(email) {
            if (!email) return 'Email is required';
            const emailRegex = new RegExp('^[^\\s@@]+@@[^\\s@@]+\\.[^\\s@@]+$');
            if (!emailRegex.test(email)) return 'Email is invalid';
            if (email.length > 50) return 'Email must be less than 50 characters';
            return null;
        }

        function validatePassword(password) {
            if (!password) return 'Password is required';
            if (password.includes(' ')) return "Password doesn't contain space";
            if (password.length < 6 || password.length > 250) return 'Password must be between 6 and 250 characters';
            return null;
        }

        function validatePhoneNumber(phone) {
            if (!phone) return 'Phone number is required';
            const phoneRegex = /^(\+84|0)[0-9]{9,10}$/;
            if (!phoneRegex.test(phone)) return 'Phone number is invalid (format: +84909123456 or 0909123456)';
            return null;
        }

        function getPasswordStrength(password) {
            let score = 0;
            if (password.length >= 8) score++;
            if (/[a-z]/.test(password)) score++;
            if (/[A-Z]/.test(password)) score++;
            if (/[0-9]/.test(password)) score++;
            if (/[^A-Za-z0-9]/.test(password)) score++;
            
            if (score < 2) return { text: 'Weak', class: 'strength-weak' };
            if (score < 4) return { text: 'Medium', class: 'strength-medium' };
            return { text: 'Strong', class: 'strength-strong' };
        }

        function showAlert(message, type = 'info') {
            const modal = document.getElementById('alertModal');
            const modalHeader = document.getElementById('modalHeader');
            const modalTitle = document.getElementById('modalTitle');
            const alertMessage = document.getElementById('alertMessage');
            
            // Set color and icon based on type
            if (type === 'error') {
                modalHeader.className = 'modal-header bg-danger text-white';
                modalTitle.innerHTML = '<i class="bi bi-exclamation-triangle-fill"></i> Error';
            } else if (type === 'success') {
                modalHeader.className = 'modal-header bg-success text-white';
                modalTitle.innerHTML = '<i class="bi bi-check-circle-fill"></i> Success';
            } else {
                modalHeader.className = 'modal-header bg-info text-white';
                modalTitle.innerHTML = '<i class="bi bi-info-circle-fill"></i> Info';
            }
            
            alertMessage.textContent = message;
            const modalInstance = new bootstrap.Modal(modal);
            modalInstance.show();
        }

        // Real-time validation
        document.getElementById('username').addEventListener('blur', async function() {
            const username = this.value.trim();
            const errorDiv = document.getElementById('usernameError');
            const checkDiv = document.getElementById('usernameCheck');
            
            errorDiv.textContent = '';
            checkDiv.textContent = '';
            
            const validationError = validateUsername(username);
            if (validationError) {
                errorDiv.textContent = validationError;
                return;
            }            try {
                const response = await fetch(`${API_BASE_URL}/Register/check-username/${encodeURIComponent(username)}`, {
                    method: 'GET',
                    headers: {
                        // Don't send SessionId for register endpoints
                    }
                });
                
                if (!response.ok) {
                    console.error('Username check failed:', response.status);
                    return;
                }
                
                const responseText = await response.text();
                let data;
                try {
                    data = JSON.parse(responseText);
                } catch (jsonError) {
                    console.error('JSON parse error in username check:', jsonError);
                    return;
                }
                
                if (data.exists) {
                    errorDiv.textContent = 'Username already exists';
                } else {
                    checkDiv.textContent = 'Username is available';
                }
            } catch (error) {
                console.error('Error checking username:', error);
            }
        });

        document.getElementById('email').addEventListener('blur', async function() {
            const email = this.value.trim();
            const errorDiv = document.getElementById('emailError');
            const checkDiv = document.getElementById('emailCheck');
            
            errorDiv.textContent = '';
            checkDiv.textContent = '';
            
            const validationError = validateEmail(email);
            if (validationError) {
                errorDiv.textContent = validationError;
                return;
            }            try {
                const response = await fetch(`${API_BASE_URL}/Register/check-email/${encodeURIComponent(email)}`, {
                    method: 'GET',
                    headers: {
                        // Don't send SessionId for register endpoints
                    }
                });
                
                if (!response.ok) {
                    console.error('Email check failed:', response.status);
                    return;
                }
                
                const responseText = await response.text();
                let data;
                try {
                    data = JSON.parse(responseText);
                } catch (jsonError) {
                    console.error('JSON parse error in email check:', jsonError);
                    return;
                }
                
                if (data.exists) {
                    errorDiv.textContent = 'Email already exists';
                } else {
                    checkDiv.textContent = 'Email is available';
                }
            } catch (error) {
                console.error('Error checking email:', error);
            }
        });

        document.getElementById('password').addEventListener('input', function() {
            const password = this.value;
            const strengthDiv = document.getElementById('passwordStrength');
            
            if (password) {
                const strength = getPasswordStrength(password);
                strengthDiv.textContent = `Password strength: ${strength.text}`;
                strengthDiv.className = `password-strength ${strength.class}`;
            } else {
                strengthDiv.textContent = '';
            }
        });

        document.getElementById('confirmPassword').addEventListener('blur', function() {
            const password = document.getElementById('password').value;
            const confirmPassword = this.value;
            const errorDiv = document.getElementById('confirmPasswordError');
            
            if (confirmPassword && password !== confirmPassword) {
                errorDiv.textContent = 'Password and Confirm Password must match';
            } else {
                errorDiv.textContent = '';
            }
        });

        // Form submission
        document.getElementById('registerForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const data = {
                username: formData.get('username').trim(),
                password: formData.get('password'),
                confirmPassword: formData.get('confirmPassword'),
                fullname: formData.get('fullname').trim(),
                address: formData.get('address').trim(),
                phoneNumber: formData.get('phoneNumber').trim(),
                email: formData.get('email').trim()
            };
            
            // Clear previous errors
            document.querySelectorAll('.error-message').forEach(div => div.textContent = '');
            
            // Validate all fields
            let hasErrors = false;
            
            const usernameError = validateUsername(data.username);
            if (usernameError) {
                document.getElementById('usernameError').textContent = usernameError;
                hasErrors = true;
            }
            
            const emailError = validateEmail(data.email);
            if (emailError) {
                document.getElementById('emailError').textContent = emailError;
                hasErrors = true;
            }
            
            const passwordError = validatePassword(data.password);
            if (passwordError) {
                document.getElementById('passwordError').textContent = passwordError;
                hasErrors = true;
            }
            
            if (data.password !== data.confirmPassword) {
                document.getElementById('confirmPasswordError').textContent = 'Password and Confirm Password must match';
                hasErrors = true;
            }
            
            const phoneError = validatePhoneNumber(data.phoneNumber);
            if (phoneError) {
                document.getElementById('phoneError').textContent = phoneError;
                hasErrors = true;
            }
            
            if (!data.fullname) {
                document.getElementById('fullnameError').textContent = 'Full name is required';
                hasErrors = true;
            }
            
            if (!data.address) {
                document.getElementById('addressError').textContent = 'Address is required';
                hasErrors = true;
            }
            
            if (hasErrors) return;            try {
                console.log('Sending registration request to:', `${API_BASE_URL}/Register`);
                console.log('Request data:', data);
                  const response = await fetch(`${API_BASE_URL}/Register`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        // Don't send SessionId for register endpoint
                    },
                    body: JSON.stringify(data)
                });
                
                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);
                console.log('Response headers:', response.headers);
                
                // Get response text first to see what we're getting
                const responseText = await response.text();
                console.log('Response text:', responseText);
                
                let result;
                try {
                    result = JSON.parse(responseText);
                } catch (jsonError) {
                    console.error('JSON parse error:', jsonError);
                    console.error('Raw response:', responseText);
                    showAlert(`Server error: Invalid JSON response. Status: ${response.status}`, 'error');
                    return;
                }
                
                console.log('Parsed result:', result);
                  if (response.ok) {
                    // Check if email verification is required
                    if (result.requiresEmailVerification) {
                        showAlert(result.message, 'success');
                        this.reset();
                        document.getElementById('passwordStrength').textContent = '';
                        setTimeout(() => {
                            window.location.href = '/Register/Success';
                        }, 2000);
                    } else {
                        showAlert('Registration successful! You can now login with your account.', 'success');
                        this.reset();
                        document.getElementById('passwordStrength').textContent = '';
                        setTimeout(() => {
                            window.location.href = '/Login';
                        }, 2000);
                    }
                } else {
                    showAlert(result.message || `Registration failed. Status: ${response.status}`, 'error');
                }
            } catch (error) {
                console.error('Detailed registration error:', error);
                showAlert(`Network error: ${error.message}. Please check your connection and try again.`, 'error');
            }
        });
    </script>
</body>
</html>

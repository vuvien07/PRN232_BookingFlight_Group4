@{
    ViewData["Title"] = "Reset Password";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .reset-password-container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .reset-password-card {
            background: white;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }
        .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        .success-message {
            color: #198754;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
        }
        .btn-primary:hover {
            background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
            transform: translateY(-1px);
        }
        .password-strength {
            height: 5px;
            border-radius: 3px;
            margin-top: 5px;
            transition: all 0.3s ease;
        }
        .strength-weak { background-color: #dc3545; }
        .strength-medium { background-color: #ffc107; }
        .strength-strong { background-color: #198754; }
    </style>
</head>
<body>
    <div class="reset-password-container">
        <div class="reset-password-card">
            <div class="text-center mb-4">
                <i class="fas fa-lock fa-3x text-primary mb-3"></i>
                <h4>Reset Password</h4>
                <p class="text-muted">Enter your new password below.</p>
            </div>

            <!-- Display TempData error message -->
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">
                    @TempData["ErrorMessage"]
                </div>
            }

            <form id="resetPasswordForm">
                <input type="hidden" id="token" value="@ViewBag.Token">
                
                <div class="mb-3">
                    <label for="newPassword" class="form-label">New Password</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-lock"></i>
                        </span>
                        <input type="password" class="form-control" id="newPassword" name="newPassword" required>
                        <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                    <div class="password-strength" id="passwordStrength"></div>
                    <div id="passwordError" class="error-message"></div>
                </div>

                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-lock"></i>
                        </span>
                        <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                        <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                    <div id="confirmPasswordError" class="error-message"></div>
                </div>

                <div id="generalError" class="error-message mb-3"></div>
                <div id="generalSuccess" class="success-message mb-3"></div>

                <div class="d-grid gap-2 mb-3">
                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        <i class="fas fa-save me-2"></i>Reset Password
                    </button>
                </div>

                <div class="text-center">
                    <a href="/Login" class="text-decoration-none">
                        <i class="fas fa-arrow-left me-1"></i>Back to Login
                    </a>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Password visibility toggle
        document.getElementById('togglePassword').addEventListener('click', function() {
            const password = document.getElementById('newPassword');
            const icon = this.querySelector('i');
            
            if (password.type === 'password') {
                password.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                password.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        });

        document.getElementById('toggleConfirmPassword').addEventListener('click', function() {
            const password = document.getElementById('confirmPassword');
            const icon = this.querySelector('i');
            
            if (password.type === 'password') {
                password.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                password.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        });

        // Password strength checker
        document.getElementById('newPassword').addEventListener('input', function() {
            const password = this.value;
            const strengthBar = document.getElementById('passwordStrength');
            
            let strength = 0;
            if (password.length >= 6) strength += 1;
            if (/[A-Z]/.test(password)) strength += 1;
            if (/[0-9]/.test(password)) strength += 1;
            if (/[^A-Za-z0-9]/.test(password)) strength += 1;
            
            strengthBar.className = 'password-strength';
            if (strength === 0) {
                strengthBar.style.width = '0%';
            } else if (strength <= 2) {
                strengthBar.style.width = '33%';
                strengthBar.classList.add('strength-weak');
            } else if (strength === 3) {
                strengthBar.style.width = '66%';
                strengthBar.classList.add('strength-medium');
            } else {
                strengthBar.style.width = '100%';
                strengthBar.classList.add('strength-strong');
            }
        });

        // Validate token on page load
        window.addEventListener('load', async function() {
            const token = document.getElementById('token').value;
            const generalError = document.getElementById('generalError');
            
            if (!token) {
                generalError.textContent = 'Invalid reset token.';
                document.getElementById('resetPasswordForm').style.display = 'none';
                return;
            }
            
            try {                const response = await fetch(`http://localhost:5077/api/ForgotPassword/validate-token?token=${encodeURIComponent(token)}`);
                const data = await response.json();
                
                if (!data.success) {
                    generalError.textContent = data.message || 'Invalid or expired token.';
                    document.getElementById('resetPasswordForm').style.display = 'none';
                }
            } catch (error) {
                console.error('Error validating token:', error);
                generalError.textContent = 'Error validating token. Please try again.';
                document.getElementById('resetPasswordForm').style.display = 'none';
            }
        });

        // Form submission
        document.getElementById('resetPasswordForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const token = document.getElementById('token').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            const submitBtn = document.getElementById('submitBtn');
            
            // Clear previous messages
            document.getElementById('passwordError').textContent = '';
            document.getElementById('confirmPasswordError').textContent = '';
            document.getElementById('generalError').textContent = '';
            document.getElementById('generalSuccess').textContent = '';
            
            // Validation
            let hasError = false;
            
            if (!newPassword) {
                document.getElementById('passwordError').textContent = 'New password is required.';
                hasError = true;
            } else if (newPassword.length < 6) {
                document.getElementById('passwordError').textContent = 'Password must be at least 6 characters long.';
                hasError = true;
            }
            
            if (!confirmPassword) {
                document.getElementById('confirmPasswordError').textContent = 'Confirm password is required.';
                hasError = true;
            } else if (newPassword !== confirmPassword) {
                document.getElementById('confirmPasswordError').textContent = 'Passwords do not match.';
                hasError = true;
            }
            
            if (hasError) return;
            
            // Show loading state
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Resetting...';
            
            try {
                const response = await fetch('http://localhost:5077/api/ForgotPassword/reset-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        token: token,
                        newPassword: newPassword,
                        confirmPassword: confirmPassword
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('generalSuccess').textContent = data.message;
                    // Clear the form
                    document.getElementById('newPassword').value = '';
                    document.getElementById('confirmPassword').value = '';
                    document.getElementById('passwordStrength').style.width = '0%';
                    
                    // Redirect to login after 3 seconds
                    setTimeout(() => {
                        window.location.href = '/Login';
                    }, 3000);
                } else {
                    document.getElementById('generalError').textContent = data.message || 'An error occurred.';
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('generalError').textContent = 'Network error. Please check your connection and try again.';
            } finally {
                // Reset button state
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="fas fa-save me-2"></i>Reset Password';
            }
        });
    </script>
</body>
</html>
